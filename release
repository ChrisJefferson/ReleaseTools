#!/bin/sh -e
#
# ReleaseTools - a set of shells script for making GAP package releases
#
# Copyright (c) 2013-2016 Max Horn
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#


######################################################################
#
# Usage information
#
help() {
cat <<EOF
Usage: $0 [OPTIONS]

A tool for making releases of GAP packages on GitHub.

Run this from within a git clone of your package repository, checked out
at the revision you want to release. This tool extracts relevant data
from the PackageInfo.g file, and performs the releases process.

Actions
  -h,  --help                      display this help text and exit
  -p,  --push                      also peform the final push, completing the release

Paths
  --srcdir <path>                  directory containing `PackageInfo.g` [Default: current directory]
  --tmpdir <path>                  path to the source directory [Default: `tmp` subdirectory of src]
  --webdir <path>                  path to the web directory [Default: `gh-pages` subdirectory of src]

Custom settings
  -t,  --tag <tag>                 git tag for the release [Default: vVERSION, e.g. v1.2.3]
  -r,  --repository <repository>   set GitHub repository (as `USERNAME/PKGNAME`)
  --token <oauth>                  GitHub access token
  -f, --force                      if a release with the same name already exists: overwrite it

Notes:
* The package name and version, the list of archive formats, and the GitHub repository
  are extracted from PackageInfo.g.
* To learn how to create a GitHub access token, please consult
  https://help.github.com/articles/creating-an-access-token-for-command-line-use/
* Without the --push option, all steps are performed, except for the final push
  of the gh-pages changes. These changes are what make the release visible
  to the GAP package distribution system.
* Please consult the README for more information.
EOF
    exit 0
}

######################################################################
#
# Various little helper functions


# Define variables from heredoc. This use the bash extension '-d' to the read
# command, also supported by zsh. If this is an issue for you, file an issue,
# and we can try to make it more portable.
define() {
    IFS='\n' read -r -d '' $1 || true
}

# print notices in green
notice() {
    printf "\033[32m%s\033[0m\n" "$*"
}

# print notices in yellow
warning() {
    printf "\033[33mWARNING: %s\033[0m\n" "$*"
}

# print error in red and exit
error() {
    printf "\033[31mERROR: %s\033[0m\n" "$*"
    exit 1
}

# execute GAP commands from a heredoc, and evaluate the result,
# unless GAP reported any errors
eval_gap() {
  # Invoke GAP. The final call to 'tr' removes newlines and is a workaround
  # for people whose gap script is broken (by not honoring -A, thus loading
  # Browse, which inserts that extra character). I am looking at you,
  # Sebastian!
  output=$( \
    (echo 'OnBreak:=function() Print("FATAL ERROR"); FORCE_QUIT_GAP(1); end;;' ; cat - ; echo ; echo "FORCE_QUIT_GAP(0);") \
    | $GAP -A -q -b 2>&1 \
    | tr -d '\r' )
  mkdir -p "$TMP_DIR"
  echo "$output" > "$TMP_DIR/gap-error.log"
  if echo "$output" | grep -q "\(FATAL ERROR\|Syntax \)" ; then
    error "There was an error running GAP, see $TMP_DIR/gap-error.log"
  fi
  eval "$output"
}

######################################################################
#
# Command line processing
#
BASE_DIR="$PWD"     # remember base dir, to allow user to specify relative webdir
SRC_DIR="$PWD"
TMP_DIR="$PWD/tmp"

PUSH=no
FORCE=no
REMOTE=origin
while true; do
  case "$1" in
    -h | --help ) help ;;

    --srcdir ) SRC_DIR="$2"; shift 2 ;;
    --webdir ) WEB_DIR="$2"; shift 2 ;;
    --tmpdir ) TMP_DIR="$2"; shift 2 ;;

    -t | --tag ) TAG="$2"; shift 2 ;;
    -r | --repository ) REPO="$2"; shift 2 ;;
    --token ) TOKEN="$2"; shift 2 ;;

    --remote ) REMOTE="$2"; shift 2 ;;

    -p | --push ) PUSH=yes; shift ;;
    --no-push ) PUSH=no; shift ;;

    -f | --force ) FORCE=yes; shift ;;
    --no-force ) FORCE=no; shift ;;
    -- ) shift; break ;;
    "" ) break ;;
    * ) error "unknown option '$1'" ;;
  esac
done


######################################################################
#
# Some initial sanity checks
#

if [ ! -f PackageInfo.g ] ; then
    error "unable to read PackageInfo.g file, use --help for instructions"
fi

if ! command -v curl >/dev/null 2>&1 ; then
    error "the 'curl' command was not found, please install it"
fi

# Check for webdir presence
if [ x$WEB_DIR = x ] ; then
    WEB_DIR="$SRC_DIR/gh-pages"
fi
if [ ! -d "$WEB_DIR" ] ; then
    error "Could not find 'webdir' with clone of your gh-pages branch"
fi

# Check whether GAP is usable
if [ x$GAP = x ] ; then
    GAP="gap"
fi
if ! command -v $GAP >/dev/null 2>&1 ; then
    error "could not find GAP, please consult the README"
fi


######################################################################
#
# Determine package name and version, and other meta data
#
notice "Extracting information from PackageInfo.g..."
eval_gap <<EOF
Read("PackageInfo.g");
Print("PKG=\"",GAPInfo.PackageInfoCurrent.PackageName,"\"\n");
Print("VERSION=\"",GAPInfo.PackageInfoCurrent.Version,"\"\n");
# extract archive formats; these can be comma or space separated, we want
# to output them space separated
tmp := GAPInfo.PackageInfoCurrent.ArchiveFormats;;
tmp := JoinStringsWithSeparator(SplitString(tmp, ", "), " ");;
Print("ARCHIVE_FORMATS=\"",tmp,"\"\n");
tmp := SplitString(GAPInfo.PackageInfoCurrent.ArchiveURL, "/");;
if Length(tmp) = 9 and tmp{[1,2,3,6,7]} = ["https:","","github.com","releases","download"] then
    Print("REPO=\"",Concatenation(tmp[4],"/",tmp[5]),"\"\n");
    Print("GAP_TAG=\"",tmp[8],"\"\n");
    len := Length(tmp[9]) - Length(GAPInfo.PackageInfoCurrent.Version);
    if len > 0 then
        Print("BASENAME=\"",tmp[9]{[1..len]},"\"\n");
    fi;
else
    tmp := GAPInfo.PackageInfoCurrent.ArchiveURL;
    Print("GAP_ERROR=\"The ArchiveURL has unexpected value '",tmp,"'\"\n");
fi;
EOF

notice "Package $PKG $VERSION"

if [ x"$GAP_ERROR" != "x" ] ; then
    error "$GAP_ERROR"
fi


######################################################################
#
# Determine the tag, and validate it
#
if [ -n "$(git status --porcelain --untracked-files=no)" ]; then
    error "uncommitted changes detected"
fi

if [ x"$TAG" = "x" ] ; then
    if [ x"$GAP_TAG" = "x" ] ; then
        TAG=v$VERSION
    else
        TAG=$GAP_TAG
    fi
fi
if [ "$TAG" != "$GAP_TAG" ] ; then
    error "given tag $TAG does not match tag $GAP_TAG found in PackageInfo.g"
fi
if ! git show-ref -q $TAG ; then
    notice "Creating git tag $TAG"
    git tag $TAG
else
    notice "Using git tag $TAG"
fi;

HEAD_REF=`git rev-parse --verify HEAD`
TAG_REF=`git rev-parse --verify $TAG`

if [ $TAG_REF != $HEAD_REF ] ; then
    error "tag $TAG is not the HEAD commit -- did you tag the right commit?"
fi

######################################################################
#
# Determine the basename for the package archives
#
#
if [ x"$BASENAME" = "x" ] ; then
    BASENAME="$PKG-"
fi
BASENAME="$BASENAME$VERSION"
notice "Using archive basename $BASENAME"

######################################################################
#
# Determine the GitHub repository and derive API urls from it
#
if [ x"$REPO" = "x" ] ; then
    error "could not guess GitHub repository"
fi
notice "Using GitHub repository $REPO"

API_URL=https://api.github.com/repos/$REPO/releases
UPLOAD_URL=https://uploads.github.com/repos/$REPO/releases

######################################################################
#
# Fetch GitHub oauth token, used to authenticate the following commands.
# See https://help.github.com/articles/git-automation-with-oauth-tokens/
#
if [ x$TOKEN = x ] ; then
    TOKEN=`git config --get github.token || echo`
fi
if [ x$TOKEN = x -a -r ~/.github_shell_token ] ; then
    TOKEN=`cat ~/.github_shell_token`
fi
if [ x$TOKEN = x ] ; then
    error "could not determine GitHub access token, please use the --token option"
fi


echo ""


######################################################################
#
# Verify there are no uncommitted changes. Also, run makedoc.g (if
# present), as that also can uncover mistakes (e.g. for projects which
# generate doc/title.xml from PackageInfo.g, it is easy to forget that
# when making the release commit).
#
if [ -e makedoc.g ] ; then
    notice "Building GAP package documentation (using makedoc.g)"
    $GAP -A -q <<GAPInput
SetPackagePath("$PKG", ".");
PushOptions(rec(relativePath:=true));
Read("makedoc.g");
GAPInput
elif [ -e doc/make_doc ] ; then
    notice "Building GAP package documentation (using doc/make_doc)"
    cd doc && ./make_doc && cd ..
else
    warning "Could not build manual (no makedoc.g and no doc/make_doc found)"
fi

if [ -n "$(git status --porcelain --untracked-files=no)" ]; then
    error "uncommitted changes detected"
fi

# Make sure the tag is on the server
notice "Pushing your tag to GitHub"
if [ x$FORCE = xyes ] ; then
    git push --force $REMOTE $TAG
else
    git push $REMOTE $TAG
fi

######################################################################
#
# Get fresh (unmodified) copies of the files, and generate some stuff
#

# Clean any remains of previous export attempts
mkdir -p "$TMP_DIR"
rm -rf "$TMP_DIR"/$BASENAME*

notice "Exporting repository content for tag '$TAG'"
git archive --prefix=$BASENAME/ $TAG . | tar xf - -C "$TMP_DIR"


# Build the package documentation, run autoconf, etc.
cd "$TMP_DIR/$BASENAME"

notice "Removing unnecessary files"
rm -f .git* .hg* .cvs*

if [ -x autogen.sh ] ; then
    notice "Generating build system files"
    sh autogen.sh
    rm -rf autom4te.cache
fi

if [ -e makedoc.g ] ; then
    notice "Building GAP package documentation for archives (using makedoc.g)"
    $GAP -A -q <<GAPInput
SetPackagePath("$PKG", ".");
PushOptions(rec(relativePath:=true));
Read("makedoc.g");
GAPInput
    rm -f doc/*.{aux,bbl,blg,brf,idx,ilg,ind,lab,log,out,pnr,tex,toc,tst}
elif [ -e doc/make_doc ] ; then
    notice "Copying GAP package documentation for archives (using doc/make_doc)"
    cp "$SRC_DIR/doc"/* doc/
    cp -r "$SRC_DIR/htm/" .
    rm -f doc/*.{aux,bbl,blg,brf,idx,ilg,ind,log,out,pnr,toc,tst}
fi

######################################################################
#
# Validate PackageInfo.g
#
echo ""
notice "Validating PackageInfo.g..."
$GAP -A -q <<GAPInput
if not ValidatePackageInfo("PackageInfo.g") then
    FORCE_QUIT_GAP(1);
fi;
GAPInput


######################################################################
#
# Create the GitHub release
#

# crude helper function for "parsing" enough JSON so that we can understand
# what's going on.
jsonval() {
    temp=`echo $response | sed 's/\\\\\//\//g' | sed 's/[{}]//g' | awk -v k="text" '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}' | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w id`
    echo ${temp##*|}
}

# check if release already exists
response=$(curl -s -S -X GET $API_URL/tags/$TAG?access_token=$TOKEN)
if ! echo "${response}" | fgrep -q "Not Found" ; then
    if [ x$FORCE = xyes ] ; then
        notice "Deleting existing release $TAG from GitHub"
        RELEASE_ID=$(jsonval | sed "s/id:/\n/g" | sed -n 2p | sed "s| ||g")
        response=$(curl --fail -s -S -X DELETE $API_URL/$RELEASE_ID?access_token=$TOKEN)
    else
        error "release $TAG already exists on GitHub, aborting (use --force to override this)"
    fi
fi

# Create the release by sending suitable JSON
define DATA <<EOF
{
  "tag_name": "$TAG",
  "name": "$VERSION",
  "body": "Release for $PKG",
  "draft": false,
  "prerelease": false
}
EOF
response=$(curl --fail -s -S -H "Content-Type: application/json" \
    -X POST --data "$DATA" $API_URL?access_token=$TOKEN)

RELEASE_ID=$(jsonval | sed "s/id:/\n/g" | sed -n 2p | sed "s| ||g")

# TODO: error handling?


######################################################################
#
# Create and upload all requested archive files (as per ARCHIVE_FORMATS)
#
cd "$TMP_DIR"
echo ""
for EXT in $ARCHIVE_FORMATS ; do
    ARCHIVENAME=$BASENAME$EXT
    FULLNAME="$TMP_DIR/$ARCHIVENAME"
    notice "Creating $ARCHIVENAME ..."
    case $EXT in
    .tar.gz)
        tar cf - $BASENAME | gzip -9c > $ARCHIVENAME
        MIMETYPE="application/x-gzip"
        ;;
    .tar.bz2)
        tar cf - $BASENAME | bzip2 -9c > $ARCHIVENAME
        MIMETYPE="application/x-bzip2"
        ;;
    .zip)
        zip -r9 --quiet $ARCHIVENAME $BASENAME
        MIMETYPE="application/zip"
        ;;
    *)
        warning "unsupported archive format $EXT"
        continue
        ;;
    esac
    if [ ! -f $FULLNAME ] ; then
        error "failed creating $FULLNAME"
    fi
    notice "Uploading $ARCHIVENAME with mime type $MIMETYPE"
    response=$(curl --fail -s -S -X POST $UPLOAD_URL/$RELEASE_ID/assets?name=$ARCHIVENAME \
        -H "Accept: application/vnd.github.v3+json" \
        -H "Authorization: token $TOKEN" \
        -H "Content-Type: $MIMETYPE" \
        --data-binary @"$FULLNAME")
done


######################################################################
#
# Update the website
#
notice "Updating website"
cd "$WEB_DIR"
git pull --ff-only

cp "$TMP_DIR/$BASENAME/README"* .
cp "$TMP_DIR/$BASENAME/PackageInfo.g" .
rm -rf doc/ htm/
if [ -e "$TMP_DIR/$BASENAME/doc/chap0.html" ] ; then
    mkdir -p doc/
    cp "$TMP_DIR/$BASENAME/doc"/*.{css,html,js,txt} doc/
fi
if [ -d "$TMP_DIR/$BASENAME/htm/" ] ; then
    cp -r "$TMP_DIR/$BASENAME/htm/" .
fi

$GAP -A -b update.g

git add -A .
git commit -m "Update website for $PKG $VERSION"

if [ x$PUSH = xyes ] ; then
    notice "Pushing website changes"
    git push
    notice "Done"
else
    notice "To complete your release, run 'git push' in your gh-pages directory"
fi

exit 0
